/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"

typedef u16 Pixel;

typedef struct
{
	Pixel bg_color;
	Pixel fg_color;
	//chess_piece *piece;
};

inline pixel SetPixel(u8 red, u8 green, u8 blue)
{
	return ((red & 0x000F) | ((green<<4) & 0x00F0)| ((blue<<8) & 0x0F00));
}

#define SCREEN_WIDTH_PIXELS 	640
#define SCREEN_HEIGHT_PIXELS 	480

#define BOARD_WIDTH_CELLS 		8
#define BOARD_HEIGHT_CELLS 		8
#define BOARD_WIDTH_PIXLES 		480
#define BOARD_HEIGHT_PIXLES 	480

#define RIGHT_BORDER_WIDTH_PIXLES 		(SCREEN_WIDTH_PIXELS - BOARD_WIDTH_PIXLES)/2
#define LEFT_BORDER_WIDTH_PIXLES 		(SCREEN_WIDTH_PIXELS - BOARD_WIDTH_PIXLES)/2
#define TOP_BORDER_HEIGHT_PIXLES 		(SCREEN_HEIGHT_PIXELS - BOARD_HEIGHT_PIXLES)/2
#define BOTTOM_BORDER_HEIGHT_PIXLES 	(SCREEN_HEIGHT_PIXELS - BOARD_HEIGHT_PIXLES)/2

Pixel screen[SCREEN_WIDTH_PIXELS][SCREEN_HEIGHT_PIXELS];

void print(char *str);

int main()
{
	Pixel cardinal = SetPixel(0xA, 0x2, 0x3);
	Pixel gold = SetPixel(0xF, 0xD, 0x3);
	Pixel Background = SetPixel(0xC, 0x5, 0x1);

    init_platform();

    print("Printing Background\n\r");
    for(y=0; y<SCREEN_HEIGHT; y++)
    {
    	for(x=0; x<LEFT_BORDER_WIDTH_PIXLES; x++)
    		screen[y][x] = Background;
    	for(x=SCREEN_WIDTH_PIXLES-RIGHT_BORDER_WIDTH_PIXLES; x<SCREEN_WIDTH; x++)
    		screen[y][x] = Background;
    }
	for(x=LEFT_BORDER_WIDTH_PIXLES; x<SCREEN_WIDTH_PIXELS-RIGHT_BORDER_WIDTH_PIXLES; x++)
	{
		for(y=0; y<TOP_BORDER_HEIGHT_PIXLES; i++)
			screen[y][x] = Background;
		for(y=SCREEN_HEIGHT_PIXLES-BOTTOM_BORDER_HEIGHT; y<SCREEN_HEIGHT_PIXLES; y++)
			screen[y][x] = Background;
	}


    return 0;
}
