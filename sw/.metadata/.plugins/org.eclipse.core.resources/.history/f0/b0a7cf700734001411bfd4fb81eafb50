/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_types.h"

typedef u16 Pixel;

typedef struct CELL_STRUCT Cell;

typedef u8 Img[50][7];

typedef struct
{
	Pixel fg_color;
	Img *img;
	Cell *location;
}ChessPiece;

typedef struct CELL_STRUCT
{
	Pixel bg_color;
	Pixel fg_color;
	ChessPiece *piece;
	struct
	{
		int x_start;
		int x_end;
		int y_start;
		int y_end;
	}bounds;

	struct
	{
		struct CELL_STRUCT *north;
		struct CELL_STRUCT *south;
		struct CELL_STRUCT *east;
		struct CELL_STRUCT *west;
		struct CELL_STRUCT *north_east;
		struct CELL_STRUCT *north_west;
		struct CELL_STRUCT *south_east;
		struct CELL_STRUCT *south_west;

	}neighbors;
}Cell;

inline Pixel SetPixel(u8 red, u8 green, u8 blue)
{
	return ((red & 0x000F) | ((green<<4) & 0x00F0) | ((blue<<8) & 0x0F00));
}

#define SCREEN_WIDTH_PIXELS 	640
#define SCREEN_HEIGHT_PIXELS 	480

#define BOARD_WIDTH_CELLS 		8
#define BOARD_HEIGHT_CELLS 		8
#define BOARD_WIDTH_PIXELS 		480
#define BOARD_HEIGHT_PIXELS 	480

#define CELL_WIDTH_PIXELS		(BOARD_WIDTH_PIXELS / BOARD_WIDTH_CELLS)
#define CELL_HEIGHT_PIXELS		(BOARD_HEIGHT_PIXELS / BOARD_HEIGHT_CELLS)

#define RIGHT_BORDER_WIDTH_PIXELS 		((SCREEN_WIDTH_PIXELS - BOARD_WIDTH_PIXELS) / 2)
#define LEFT_BORDER_WIDTH_PIXELS 		((SCREEN_WIDTH_PIXELS - BOARD_WIDTH_PIXELS) / 2)
#define TOP_BORDER_HEIGHT_PIXELS 		((SCREEN_HEIGHT_PIXELS - BOARD_HEIGHT_PIXELS) / 2)
#define BOTTOM_BORDER_HEIGHT_PIXELS 	((SCREEN_HEIGHT_PIXELS - BOARD_HEIGHT_PIXELS) / 2)

Pixel screen[SCREEN_HEIGHT_PIXELS][SCREEN_WIDTH_PIXELS];
Cell board[BOARD_HEIGHT_CELLS][BOARD_WIDTH_CELLS];

void print(char *str);


static Img queen =
{
		{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		{0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00},
		{0x00, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x00},
		{0x00, 0x0E, 0x06, 0x18, 0x1C, 0x00, 0x00},
		{0x00, 0x1F, 0x06, 0x18, 0x3E, 0x00, 0x00},
		{0x00, 0x31, 0x82, 0x10, 0x63, 0x00, 0x00},
		{0x00, 0x31, 0x81, 0xE0, 0x63, 0x00, 0x00},
		{0x38, 0x31, 0x80, 0xC0, 0x63, 0x07, 0x00},
		{0x7C, 0x1F, 0x00, 0xC0, 0x3E, 0x0F, 0x80},
		{0xC6, 0x06, 0x00, 0xC0, 0x18, 0x18, 0xC0},
		{0xC6, 0x07, 0x01, 0xE0, 0x38, 0x18, 0xC0},
		{0xC6, 0x07, 0x01, 0x20, 0x38, 0x18, 0xC0},
		{0x7C, 0x05, 0x01, 0x20, 0x28, 0x0F, 0x80},
		{0x3C, 0x0D, 0x81, 0x20, 0x6C, 0x0F, 0x00},
		{0x1C, 0x0C, 0x81, 0x20, 0x4C, 0x0E, 0x00},
		{0x1E, 0x0C, 0x83, 0x30, 0x4C, 0x1E, 0x00},
		{0x1E, 0x0C, 0xC3, 0x30, 0xCC, 0x1E, 0x00},
		{0x0B, 0x0C, 0x42, 0x10, 0x8C, 0x34, 0x00},
		{0x09, 0x08, 0x62, 0x11, 0x84, 0x24, 0x00},
		{0x09, 0x88, 0x26, 0x19, 0x04, 0x64, 0x00},
		{0x08, 0x88, 0x26, 0x19, 0x04, 0x44, 0x00},
		{0x08, 0xC8, 0x36, 0x1B, 0x04, 0xC4, 0x00},
		{0x0C, 0x48, 0x16, 0x1A, 0x04, 0x8C, 0x00},
		{0x0C, 0x68, 0x1C, 0x0E, 0x05, 0x8C, 0x00},
		{0x0C, 0x28, 0x1C, 0x0E, 0x05, 0x0C, 0x00},
		{0x04, 0x38, 0x0C, 0xCC, 0x07, 0x08, 0x00},
		{0x04, 0x18, 0x8D, 0xEC, 0x46, 0x08, 0x00},
		{0x04, 0x1B, 0xFF, 0x3F, 0xF6, 0x08, 0x00},
		{0x04, 0xFE, 0x00, 0x00, 0x1F, 0xC8, 0x00},
		{0x07, 0xC0, 0x00, 0x00, 0x00, 0xF8, 0x00},
		{0x06, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00},
		{0x06, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00},
		{0x03, 0x00, 0x7F, 0xFF, 0x80, 0x30, 0x00},
		{0x01, 0x83, 0xF8, 0x07, 0xF0, 0x60, 0x00},
		{0x00, 0xFE, 0x00, 0x00, 0x1F, 0xC0, 0x00},
		{0x00, 0x70, 0x00, 0x00, 0x03, 0x80, 0x00},
		{0x00, 0x60, 0x00, 0x00, 0x01, 0x80, 0x00},
		{0x00, 0x20, 0x3F, 0xFF, 0x01, 0x00, 0x00},
		{0x00, 0x33, 0xE0, 0x01, 0xF3, 0x00, 0x00},
		{0x00, 0x1F, 0x00, 0x00, 0x3E, 0x00, 0x00},
		{0x00, 0x18, 0x00, 0x00, 0x06, 0x00, 0x00},
		{0x00, 0x30, 0x1F, 0xFE, 0x03, 0x00, 0x00},
		{0x00, 0x23, 0xFF, 0xFF, 0xF1, 0x00, 0x00},
		{0x00, 0x7F, 0x80, 0x00, 0x7F, 0x80, 0x00},
		{0x00, 0x70, 0x00, 0x00, 0x03, 0x80, 0x00},
		{0x00, 0x38, 0x00, 0x00, 0x07, 0x00, 0x00},
		{0x00, 0x0F, 0xFF, 0xFF, 0xFC, 0x00, 0x00},
		{0x00, 0x01, 0xFF, 0xFF, 0xE0, 0x00, 0x00},
		{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
};



ChessPiece Queens[8];

void init_board(Pixel dark_square, Pixel light_square)
{
	int x, y;
	for(y=0; y<BOARD_HEIGHT_CELLS; y++)
		for(x=0; x<BOARD_WIDTH_CELLS; x++)
		{
			board[y][x].bounds.x_start = x*CELL_WIDTH_PIXELS + LEFT_BORDER_WIDTH_PIXELS;
			board[y][x].bounds.y_start = y*CELL_HEIGHT_PIXELS + TOP_BORDER_HEIGHT_PIXELS;
			board[y][x].bounds.x_end = board[y][x].bounds.x_start + CELL_WIDTH_PIXELS;
			board[y][x].bounds.y_end = board[y][x].bounds.y_start + CELL_HEIGHT_PIXELS;

			if((x%2)^(y%2))
				board[y][x].bg_color = dark_square;
			else
				board[y][x].bg_color = light_square;

			if(y>0)
			{
				board[y][x].neighbors.north = &board[y-1][x];
				if(x>0)
					board[y][x].neighbors.north_west = &board[y-1][x-1];
				if(x<BOARD_WIDTH_CELLS-1)
					board[y][x].neighbors.north_east = &board[y-1][x+1];
			}
			if(y<BOARD_HEIGHT_CELLS-1)
			{
				board[y][x].neighbors.south = &board[y+1][x];
				if(x>0)
					board[y][x].neighbors.south_west = &board[y+1][x-1];
				if(x<BOARD_WIDTH_CELLS-1)
					board[y][x].neighbors.south_east = &board[y+1][x+1];
			}
			if(x>0)
				board[y][x].neighbors.west = &board[y][x-1];
			if(x<BOARD_WIDTH_CELLS-1)
				board[y][x].neighbors.east = &board[y][x+1];
		}
}

void print_board()
{
	int x, y, i, j;
	for(y=0; y<BOARD_HEIGHT_CELLS; y++)
	{
		for(x=0; x<BOARD_WIDTH_CELLS; x++)
		{
			for(i=board[y][x].bounds.y_start; i<board[y][x].bounds.y_end; i++)
			{
				for(j=board[y][x].bounds.x_start; j<board[y][x].bounds.x_end; j++)
				{
					screen[i][j] = board[y][x].bg_color
				}
			}
			if(board[y][x].piece)
			{
				u8[50][7] *img = board[y][x].piece->img;
				for(i=0; i<50; i++)
				{
					for(j=0; j<50; j++)
					{
						if((img[i][j/8]) & (1<<(7-(j%8))))
						{
							screen[board[y][x].bounds.y_start + i + 5][board[y][x].bounds.x_start + j + 5] = board[y][x].piece->fg_color;
						}
					}
				}
			}
		}
	}
}

int main()
{
	int x, y;
	Pixel cardinal = SetPixel(0xA, 0x2, 0x3);
	Pixel gold = SetPixel(0xF, 0xD, 0x3);
	Pixel background = SetPixel(0xC, 0x5, 0x1);
	//Pixel black = SetPixel(0x0, 0x0, 0x0);
	//Pixel white = SetPixel(0xF, 0xF, 0xF);

    init_platform();

    init_board(cardinal, gold);

    print("Printing Background\n\r");
    for(y=0; y<SCREEN_HEIGHT_PIXELS; y++)
    {
    	for(x=0; x<LEFT_BORDER_WIDTH_PIXELS; x++)
    		screen[y][x] = background;
    	for(x=SCREEN_WIDTH_PIXELS-RIGHT_BORDER_WIDTH_PIXELS; x<SCREEN_WIDTH_PIXELS; x++)
    		screen[y][x] = background;
    }
	for(x=LEFT_BORDER_WIDTH_PIXELS; x<SCREEN_WIDTH_PIXELS-RIGHT_BORDER_WIDTH_PIXELS; x++)
	{
		for(y=0; y<TOP_BORDER_HEIGHT_PIXELS; y++)
			screen[y][x] = background;
		for(y=SCREEN_HEIGHT_PIXELS-BOTTOM_BORDER_HEIGHT_PIXELS; y<SCREEN_HEIGHT_PIXELS; y++)
			screen[y][x] = background;
	}

	print("Printing Board\n\r");

	while(1)
	{
		print_board();
		usleep(500000);
	}

    return 0;
}
